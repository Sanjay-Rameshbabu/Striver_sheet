//Better Solution
class Main {
    public static  longSubArray(int[]arr,int target,int n){
        int len=0;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=arr[j];
                if(sum==target) 
                   len=Math.max(len,j-i+1);
            }
        }
        return len;
    }
    public static void main(String[] args) {
        int []arr={2,3,5,1,9};
        int target=10;
        int n= arr.length;
        int ans=longSubArray(arr,target,n);
        System.out.println("answer is " +ans);
    }
}

Optimical solution:
import java.util.*;
class Main {
    public static int longSubArray(int[]arr,int target,int n){
        int len=0;
        int maxlen=0;
        int sum=0;
        Map<Integer,Integer>map =new HashMap<>();
        for(int i=0;i<n;i++){
            sum+=arr[i];
            if(sum==target){
                maxlen=Math.max(maxlen,i+1);
            }
            int rem=sum-target;
            if(map.containsKey(rem)){
                len=i- map.get(rem);
                maxlen=Math.max(maxlen,len);
            }
            if(!map.containsKey(sum))
              map.put(sum,i);
        }
        return maxlen;
    }
    public static void main(String[] args) {
        int []arr={2,3,5,1,9};
        int target=8;
        int n= arr.length;
        int ans=longSubArray(arr,target,n);
        System.out.println("answer is " +ans);
    }
}
